generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  role          String    @default("user") // "user" or "admin"
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relation fields
  accounts      Account[]
  sessions      Session[]
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

// You may also want to add this model for authentication sessions if using NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Visitor {
  visitorId    String   @id
  userAgent    String
  firstVisit   DateTime
  lastVisit    DateTime
  visitCount   Int      @default(1)
  subscriberId Int?
  subscriber   NewsletterSubscriber? @relation(fields: [subscriberId], references: [id])
}

model NewsletterSubscriber {
  id               Int                         @id @default(autoincrement())
  email            String                      @unique
  name             String?
  source           String?
  active           Boolean                     @default(true)
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  preferences      Json?
  lastEmailSentAt  DateTime?
  emailsSent       Int                         @default(0)
  unsubscribeReason String?
  unsubscribedAt   DateTime?
  campaigns        NewsletterCampaignRecipient[]
  linkClicks       NewsletterLinkClick[]
  unsubscribes     NewsletterUnsubscribe[]
  visitors         Visitor[]

  @@index([email])
  @@index([active])
}

model NewsletterCampaign {
  id              Int                           @id @default(autoincrement())
  title           String
  subject         String
  content         String
  sentAt          DateTime?
  status          String                        @default("draft")
  totalRecipients Int                           @default(0)
  opened          Int                           @default(0)
  clicked         Int                           @default(0)
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  scheduledFor    DateTime?
  recipients      NewsletterCampaignRecipient[]
  linkClicks      NewsletterLinkClick[]
  unsubscribes    NewsletterUnsubscribe[]
}

model NewsletterCampaignRecipient {
  id           Int                  @id @default(autoincrement())
  campaignId   Int
  subscriberId Int
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  campaign     NewsletterCampaign   @relation(fields: [campaignId], references: [id])
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id])

  @@unique([campaignId, subscriberId])
  @@index([campaignId])
  @@index([subscriberId])
}

model NewsletterUnsubscribe {
  id             Int                  @id @default(autoincrement())
  subscriberId   Int
  campaignId     Int?
  reason         String?
  unsubscribedAt DateTime             @default(now())
  campaign       NewsletterCampaign?  @relation(fields: [campaignId], references: [id])
  subscriber     NewsletterSubscriber @relation(fields: [subscriberId], references: [id])

  @@index([subscriberId])
  @@index([campaignId])
}

model NewsletterLinkClick {
  id           Int                  @id @default(autoincrement())
  campaignId   Int
  subscriberId Int
  url          String
  clickedAt    DateTime             @default(now())
  campaign     NewsletterCampaign   @relation(fields: [campaignId], references: [id])
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id])

  @@index([campaignId])
  @@index([subscriberId])
}